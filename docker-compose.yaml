version: "3"
volumes: { home, db, minio1, minio2, redis, venv }
networks: { default }
services:
  db:
    environment: ["POSTGRES_USER=django", "POSTGRES_PASSWORD=django"]
    image: "mdillon/postgis:9.6-alpine"
    volumes: ["db:/var/lib/postgresql/data"]
  redis:
    image: "redis:3.2-alpine"
    volumes: ["redis:/data"]
  minio:
    command: "server /export"
    environment: ["MINIO_ACCESS_KEY=djangos3", "MINIO_SECRET_KEY=djangos3"]
    image: "minio/minio"
    volumes: ["minio1:/export", "minio2:/root/.config"]
    networks: { default: { aliases: ["minio", "min.io"] } }
  backend: &backend
    build:
      context: .
      dockerfile: "conf/docker/Dockerfile"
    command: "poetry run django-admin runserver_plus 0.0.0.0:8000 --nopin"
    depends_on: ["db", "minio", "redis"]
    env_file: ".env"
    environment:
      PYTHONPATH: "/var/www/src"
      PYTHONDONTWRITEBYTECODE: "nope"
    stdin_open: true
    tty: true
    volumes:
      - "home:/root"
      - "venv:/var/www/.venv"
      - "./src:/var/www/src"
      - "./conf:/var/www/conf"
      - "./pyproject.toml:/var/www/pyproject.toml"
      - "./poetry.lock:/var/www/poetry.lock"
      - "./Makefile:/var/www/Makefile"
  celery:
    <<: *backend
    command: "poetry run celery --app webapp worker --loglevel info --beat --scheduler django_celery_beat.schedulers:DatabaseScheduler --task-events "
  web:
    image: "nginx:mainline-alpine"
    depends_on: ["backend"]
    ports: ["8000:80"]
    volumes:
      - "./conf/docker/nginx.conf:/etc/nginx/nginx.conf"
